-- ==============================================================
-- Generated by Vitis HLS v2023.2.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity leading_zero_count is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (5 downto 0) );
end;


architecture behav of leading_zero_count is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "leading_zero_count_leading_zero_count,hls_ip_2023_2_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu7ev-ffvf1517-3-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.539750,HLS_SYN_LAT=1,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=2,HLS_SYN_LUT=64,HLS_VERSION=2023_2_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal LUT_array_i_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal LUT_array_i_ce0 : STD_LOGIC;
    signal LUT_array_i_q0 : STD_LOGIC_VECTOR (3 downto 0);
    signal LUT_array_i_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal LUT_array_i_ce1 : STD_LOGIC;
    signal LUT_array_i_q1 : STD_LOGIC_VECTOR (3 downto 0);
    signal LUT_array_i_address2 : STD_LOGIC_VECTOR (7 downto 0);
    signal LUT_array_i_ce2 : STD_LOGIC;
    signal LUT_array_i_q2 : STD_LOGIC_VECTOR (3 downto 0);
    signal LUT_array_i_address3 : STD_LOGIC_VECTOR (7 downto 0);
    signal LUT_array_i_ce3 : STD_LOGIC;
    signal LUT_array_i_q3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln452_fu_117_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln452_1_fu_132_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln452_2_fu_147_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln452_3_fu_156_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal input_fu_107_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal input_1_fu_122_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal input_2_fu_137_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal input_3_fu_152_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_fu_161_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_169_p5 : STD_LOGIC_VECTOR (3 downto 0);
    signal intermediate4_fu_181_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln171_1_fu_191_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln171_fu_187_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_1_fu_201_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_209_p5 : STD_LOGIC_VECTOR (3 downto 0);
    signal intermediate4_1_fu_221_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln171_3_fu_231_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln171_2_fu_227_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal LUTS16_fu_195_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_3_fu_241_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_249_p6 : STD_LOGIC_VECTOR (4 downto 0);
    signal LUTS16_1_fu_235_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal intermediate5_fu_263_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln176_1_fu_273_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln176_fu_269_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component leading_zero_count_LUT_array_i_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        address2 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR (3 downto 0);
        address3 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce3 : IN STD_LOGIC;
        q3 : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;



begin
    LUT_array_i_U : component leading_zero_count_LUT_array_i_ROM_AUTO_1R
    generic map (
        DataWidth => 4,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => LUT_array_i_address0,
        ce0 => LUT_array_i_ce0,
        q0 => LUT_array_i_q0,
        address1 => LUT_array_i_address1,
        ce1 => LUT_array_i_ce1,
        q1 => LUT_array_i_q1,
        address2 => LUT_array_i_address2,
        ce2 => LUT_array_i_ce2,
        q2 => LUT_array_i_q2,
        address3 => LUT_array_i_address3,
        ce3 => LUT_array_i_ce3,
        q3 => LUT_array_i_q3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    LUTS16_1_fu_235_p2 <= std_logic_vector(unsigned(zext_ln171_3_fu_231_p1) + unsigned(zext_ln171_2_fu_227_p1));
    LUTS16_fu_195_p2 <= std_logic_vector(unsigned(zext_ln171_1_fu_191_p1) + unsigned(zext_ln171_fu_187_p1));
    LUT_array_i_address0 <= zext_ln452_3_fu_156_p1(8 - 1 downto 0);
    LUT_array_i_address1 <= zext_ln452_2_fu_147_p1(8 - 1 downto 0);
    LUT_array_i_address2 <= zext_ln452_1_fu_132_p1(8 - 1 downto 0);
    LUT_array_i_address3 <= zext_ln452_fu_117_p1(8 - 1 downto 0);

    LUT_array_i_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            LUT_array_i_ce0 <= ap_const_logic_1;
        else 
            LUT_array_i_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    LUT_array_i_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            LUT_array_i_ce1 <= ap_const_logic_1;
        else 
            LUT_array_i_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    LUT_array_i_ce2_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            LUT_array_i_ce2 <= ap_const_logic_1;
        else 
            LUT_array_i_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    LUT_array_i_ce3_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            LUT_array_i_ce3 <= ap_const_logic_1;
        else 
            LUT_array_i_ce3 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= std_logic_vector(unsigned(zext_ln176_1_fu_273_p1) + unsigned(zext_ln176_fu_269_p1));
    input_1_fu_122_p4 <= input_r(23 downto 16);
    input_2_fu_137_p4 <= input_r(15 downto 8);
    input_3_fu_152_p1 <= input_r(8 - 1 downto 0);
    input_fu_107_p4 <= input_r(31 downto 24);
    intermediate4_1_fu_221_p2 <= (tmp_5_fu_209_p5 and LUT_array_i_q0);
    intermediate4_fu_181_p2 <= (tmp_2_fu_169_p5 and LUT_array_i_q2);
    intermediate5_fu_263_p2 <= (tmp_9_fu_249_p6 and LUTS16_1_fu_235_p2);
    tmp_1_fu_201_p3 <= LUT_array_i_q1(3 downto 3);
    tmp_2_fu_169_p5 <= (((tmp_fu_161_p3 & tmp_fu_161_p3) & tmp_fu_161_p3) & tmp_fu_161_p3);
    tmp_3_fu_241_p3 <= LUTS16_fu_195_p2(4 downto 4);
    tmp_5_fu_209_p5 <= (((tmp_1_fu_201_p3 & tmp_1_fu_201_p3) & tmp_1_fu_201_p3) & tmp_1_fu_201_p3);
    tmp_9_fu_249_p6 <= ((((tmp_3_fu_241_p3 & tmp_3_fu_241_p3) & tmp_3_fu_241_p3) & tmp_3_fu_241_p3) & tmp_3_fu_241_p3);
    tmp_fu_161_p3 <= LUT_array_i_q3(3 downto 3);
    zext_ln171_1_fu_191_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(intermediate4_fu_181_p2),5));
    zext_ln171_2_fu_227_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(LUT_array_i_q1),5));
    zext_ln171_3_fu_231_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(intermediate4_1_fu_221_p2),5));
    zext_ln171_fu_187_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(LUT_array_i_q3),5));
    zext_ln176_1_fu_273_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(intermediate5_fu_263_p2),6));
    zext_ln176_fu_269_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(LUTS16_fu_195_p2),6));
    zext_ln452_1_fu_132_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_1_fu_122_p4),64));
    zext_ln452_2_fu_147_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_2_fu_137_p4),64));
    zext_ln452_3_fu_156_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_3_fu_152_p1),64));
    zext_ln452_fu_117_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_fu_107_p4),64));
end behav;
